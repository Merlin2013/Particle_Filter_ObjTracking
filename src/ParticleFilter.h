//
// Created by ahmed on 25.12.16.
//

#ifndef PARTICLEFILTER_H
#define PARTICLEFILTER_H

#include "Particle.h"

float calLikelihood(float fitness,float sigma);
double sampleFromGaussian(double mean,double stdev);


class ParticleFilter{
public:
    ParticleFilter(){numptl=200; mu=0; sigma=20; particles.resize(numptl); cumulFit.resize(numptl);};
    ~ParticleFilter(){};
    void init(cv::Mat& img, cv::Rect& bb);      // input is the reference frame and bounding box. Initialize the histogram refhist here
    void track(cv::Mat& img);                   // samples particles from previous frame, applies motion model and then calculates fitness of each particle
    void showParticles(cv::Mat& img);           // function to show the particles of the current frame (already given)

    int numptl;                     // number of particles
    float mu, sigma;                // motion model: offset_x and offset_y are generated by a 1d gaussian (mean: mu, std: sigma)
    std::vector<float> cumulFit;         // vector to hold the cumulative fitness
    std::vector<Particle> particles;
    cv::Mat refhist;                 // holds the reference color histogram for evaluating fitness of particles from further frames
private:
    void evaluateCumulFeat();       // computes cumulative fitness distribution and populates cumulFit
    void showParticle(cv::Mat& img,int pid);
    std::vector<Particle> resample();
    int sampleParticle();
    void normalizeWeights();
    cv::Rect applyMotionModel(const cv::Rect& bb);
    cv::RNG rng;                     // random number generator for offsets, sampling etc.
};


#endif //PARTICLEFILTER_H
